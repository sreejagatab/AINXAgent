generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  password      String
  role          String         @default("USER")
  isActive      Boolean        @default(true)
  lastLogin     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  preferences   UserPreferences?
  prompts       Prompt[]
  notifications Notification[]
  sessions      Session[]

  @@index([email])
  @@index([username])
}

model UserPreferences {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme     String   @default("light")
  language  String   @default("en")
  aiModel   String   @default("gpt-3.5-turbo")
  notifications Json  @default("{\"email\":true,\"push\":false,\"desktop\":true,\"frequency\":\"daily\"}")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Prompt {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  content     String
  type        String
  tags        String[]
  model       String
  parameters  Json
  status      String   @default("draft")
  version     Int      @default(1)
  executions  PromptExecution[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([tags])
}

model PromptExecution {
  id          String   @id @default(uuid())
  promptId    String
  prompt      Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  input       String
  output      String
  tokenUsage  Int
  duration    Int
  status      String
  error       String?
  metadata    Json?
  createdAt   DateTime @default(now())

  @@index([promptId])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String
  title     String
  message   String
  priority  String   @default("normal")
  data      Json?
  read      Boolean  @default(false)
  readAt    DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String   @unique
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@index([refreshToken])
} 