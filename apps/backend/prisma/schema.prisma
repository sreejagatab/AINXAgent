generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(USER)
  apiKeys       ApiKey[]
  prompts       Prompt[]
  tools         Tool[]
  evaluations   Evaluation[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model Prompt {
  id            String    @id @default(cuid())
  name          String
  description   String?
  template      String
  variables     Json      // Array of PromptVariable
  category      String?
  isPublic      Boolean   @default(false)
  version       Int       @default(1)
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  evaluations   Evaluation[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("prompts")
}

model Tool {
  id            String    @id @default(cuid())
  name          String
  description   String?
  type          String
  parameters    Json      // Tool configuration
  isPublic      Boolean   @default(false)
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  executions    ToolExecution[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("tools")
}

model Evaluation {
  id            String    @id @default(cuid())
  promptId      String
  prompt        Prompt    @relation(fields: [promptId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  response      String
  scores        Json      // Evaluation scores
  suggestions   Json      // Array of suggestions
  metadata      Json?     // Additional metadata
  createdAt     DateTime  @default(now())

  @@map("evaluations")
}

model ToolExecution {
  id            String    @id @default(cuid())
  toolId        String
  tool          Tool      @relation(fields: [toolId], references: [id])
  userId        String
  parameters    Json      // Execution parameters
  result        Json?     // Execution result
  status        String    // success, error, pending
  error         String?   // Error message if failed
  executionTime BigInt    // Timestamp in milliseconds
  createdAt     DateTime  @default(now())

  @@map("tool_executions")
}

model ApiKey {
  id            String    @id @default(cuid())
  key           String    @unique
  name          String?
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  lastUsed      DateTime?
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("api_keys")
}

enum Role {
  USER
  ADMIN
} 